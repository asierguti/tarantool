
<section xmlns="http://docbook.org/ns/docbook" version="5.0"
         xmlns:xlink="http://www.w3.org/1999/xlink"
         xml:id="dynamic-data-model">

<title>Dynamic data model</title>

<para>

If you tried out the <link linkend="getting-started-start-stop"><quote>Starting Tarantool and making your first database</quote></link>
exercise from the last chapter, then your database looks like this:
<programlisting>
+--------------------------------------------+
|                                            |
| SPACE 'tester'                             |
| +----------------------------------------+ |
| |                                        | |
| | TUPLE SET 'tester'                     | |
| | +-----------------------------------+  | |
| | | Tuple: [ 1 ]                      |  | |
| | | Tuple: [ 2, 'Music' ]             |  | |
| | | Tuple: [ 3, 'length', 93 ]        |  | |
| | +-----------------------------------+  | |
| |                                        | |
| | INDEX 'primary'                        | |
| | +-----------------------------------+  | |
| | | Key: 1                            |  | |
| | | Key: 2                            |  | |
| | | Key: 3                            |  | |
| | +-----------------------------------+  | |
| |                                        | |
| +----------------------------------------+ |
+--------------------------------------------+
</programlisting>
</para>

<bridgehead renderas="sect2">Space</bridgehead>

<para>
A <emphasis>space<alt>the paradigm of tuples and spaces is
derived from distributed computing</alt></emphasis> -- 'tester' in the example -- is a container.
</para>
<para>
When Tarantool is being used to store data, there is always at least one space.
There can be many spaces.
Each space has a unique name specified by the user.
Each space has a unique numeric identifier which can be specified by the user but usually is assigned automatically by Tarantool.
Spaces always contain one tuple set and one or more indexes.
</para>

<bridgehead renderas="sect2">Tuple Set</bridgehead>

<para>
A <emphasis>tuple set<alt>There's a Wikipedia article about tuples: https://en.wikipedia.org/wiki/Tuple</alt></emphasis> -- 'tester' in the example -- is a group of tuples.
</para>
<para>
There is always one tuple set in a space.
The identifier of a tuple set is the same as the space name -- 'tester' in the example.
</para>
<para>
A tuple fills
the same role as a <quote>row</quote> or a <quote>record</quote>, and the
components of a tuple (which we call <quote>fields</quote>)
fill the same role as a
<quote>row column</quote> or <quote>record field</quote>, except that: the
fields of a tuple don't need to have names.
That's why there was no need to pre-define the
tuple set when creating the space, and that's
why each tuple can have a different number of
elements, and that's why we say that Tarantool has
a <quote>dynamic</quote> data model.
Tuples are stored as <link xlink:href="http://en.wikipedia.org/wiki/MessagePack">MsgPack</link> arrays.
</para>
<para>
Any given tuple may have any number of fields and the
fields may have a variety of types.
The identifier of a field is the field's number, base 1.
For example <quote>1</quote> can be used in some contexts
to refer to the first field of a tuple.
</para>
<para>
When Tarantool returns a tuple value, it surrounds
strings with single quotes, separates fields with commas,
and encloses the tuple inside square brackets. For example:
<computeroutput>[ 3, 'length', 93 ]</computeroutput>.
</para>

<bridgehead renderas="sect2">Index</bridgehead>

<para xml:id="an-index">
An index -- 'primary' in the example -- is a group of key values and pointers.
</para>
<para>
In order for a tuple set to be useful, there must always at least one index in a space.
There can be many.
As with spaces, the user can and should specify the index name, and
let Tarantool come up with a unique numeric identifier (the "index id").
In our example there is one index and its name is <quote>primary</quote>.
</para>

<para>
An index may be <emphasis>multi-part</emphasis>, that is, the user can declare
that an index key value is taken from two or more fields
in the tuple, in any order. An index may be <emphasis>unique</emphasis>, that is, the user can declare
that it would be illegal to have the same key value twice.
An index may have <emphasis>one of three types</emphasis>:
HASH which is fastest and uses the least memory but must be unique,
TREE which allows partial-key searching and ordered results,
and BITSET which can be good for searches that contain '=' and 
multiple  ANDed conditions.
The first index is called the <emphasis><quote>primary key</quote> index</emphasis>
and it must be unique; all other indexes are called
<quote>secondary</quote> indexes.
</para>

<para>
An index definition may include identifiers of tuple fields and their expected types.
The allowed types are NUM (64-bit unsigned integer between 0 and 18,446,744,073,709,551,615), or STR (string, any sequence of octets)
Take our example, which has the request:
<programlisting>i = s:create_index('primary', {type = 'hash', parts = {1, 'NUM'}})</programlisting>
The effect is that, for all tuples in tester, field number 1
must exist and must be a 64-bit unsigned integer.
</para>

<para>
Space definitions and index definitions are stored permanently in <emphasis>system spaces</emphasis>.
It is possible to add, drop, or alter the definitions at runtime, with some restrictions.
The syntax details for defining spaces and indexes are in section
<link linkend="sp-box-library">The box library</link>.
</para>

<bridgehead renderas="sect2">Data types</bridgehead>

    <para>
      Tarantool can work with numbers, strings, booleans, tables, and userdata.
    </para>

    <para>
      <informaltable>
      <tgroup cols="4" align="left" colsep="1" rowsep="1">
      <thead>
      <row><entry>General type</entry>                   <entry>Specific type</entry><entry>What Lua type() would return</entry>                                         <entry>Example</entry></row>
      </thead>
      <tbody>
      <row><entry xml:id="function-type-number">scalar     </entry><entry>number</entry>      <entry><link xlink:href="http://www.lua.org/pil/2.3.html">"number"</link></entry>   <entry>12345</entry></row>
      <row><entry xml:id="function-type-string">scalar     </entry><entry>string</entry>      <entry><link xlink:href="http://www.lua.org/pil/2.4.html">"string"</link></entry>   <entry>'A B C'</entry></row>
      <row><entry xml:id="function-type-boolean">scalar    </entry><entry>boolean</entry>      <entry><link xlink:href="http://www.lua.org/pil/2.2.html">"boolean"</link></entry>   <entry>true</entry></row>
      <row><entry xml:id="function-type-nil">scalar        </entry><entry>nil</entry>         <entry><link xlink:href="http://www.lua.org/pil/2.1.html">"nil"</link></entry>      <entry>nil</entry></row>
      <row><entry xml:id="function-type-lua-table">compound</entry><entry>Lua table</entry>   <entry><link xlink:href="http://www.lua.org/pil/2.5.html">"table"</link></entry>    <entry>table: 0x410f8b10</entry></row>
      <row><entry xml:id="function-type-tuple">compound    </entry><entry>tuple</entry>       <entry><link xlink:href="http://www.lua.org/pil/28.1.html">"Userdata"</link></entry><entry>12345: {'A B C'}</entry></row>
      </tbody>
      </tgroup>                                   
      </informaltable>
    In Lua a "number" is double-precision floating-point;
    however, for database storage Tarantool uses MsgPack rules,
    and MsgPack allows for both integer and floating-point values.
    So Tarantool will store a number as a float if the value contains a decimal point, and otherwise will store as an integer.
    Tarantool can store signed numbers, but not in indexed fields -- when a field has a 'NUM' index, the values must be unsigned 64-bit integers.
    Large numbers can be entered with exponential notation, for example 9e99.
    Large integers greater than 100,000,000,000,000 (1e14) should be entered with the <link linkend="tonumber64">tonumber64</link> function.
    Storage is variable-length, so the smallest number requires only one byte but the largest number requires nine bytes.
    </para>
    <para>
    A "string" a variable-length sequence of bytes, usually represented with alphanumeric
    characters inside single quotes.
    </para>
    <para>
    A "boolean" is either <code>true</code> or <code>false</code>.
    </para>
    <para>
    A "nil" type has only one possible value, also called "nil", but often displayed
    as "null". Nils may be compared to values of any types with == (is-equal) or ~=
    (is-not-equal), but other operations will not work. Nils may not be used in Lua tables;
    the workaround is to use
    <link linkend="yaml-null"><code>yaml.NULL</code></link>
    or <link linkend="json-null"><code>json.NULL</code></link>
    or <link linkend="msgpack-null"><code>msgpack.NULL</code></link>.
    </para>
    <para>
      A tuple is returned in YAML format like <code>- [120, 'a', 'b', 'c']</code>.
      A  few functions may return tables with multiple tuples.
      A scalar may be converted to a tuple with only one field.
      A Lua table may contain all of a tuple's fields, but not nil.
      For more tuple examples see <code xlink:href="#box.tuple">box.tuple</code>.
    </para>


<bridgehead renderas="sect2">Operations</bridgehead>

<para>
The basic operations are: the four data-change operations
(insert, update, delete, replace), and the data-retrieval
operation (select). There are also minor operations like <quote>ping</quote>
which can only be used with the binary protocol.
Also, there are  <olink
targetptr="box.index.iterator">index iterator</olink> operations,
which can only be used with Lua code.
(Index iterators are for traversing indexes one key at a time,
taking advantage of features that are specific
to an index type, for example evaluating Boolean expressions
when traversing BITSET indexes, or going in descending order
when traversing TREE indexes.)
</para>

<para>
Five examples of basic operations:
<programlisting>
-- Add a new tuple to tuple set tester.
-- The first field, field[1], will be 999 (type is NUM).
-- The second field, field[2], will be 'Taranto' (type is STR).
box.space.tester:insert{999, 'Taranto'}

-- Update the tuple, changing field field[2].
-- The clause "{999}", which has the value to look up in
-- the index of the tuple's primary-key field, is mandatory
-- because update() requests must always have a clause that
-- specifies the primary key, which in this case is field[1].
-- The clause "{{'=', 2, 'Tarantino'}}" specifies that assignment
-- will happen to field[2] with the new value.
box.space.tester:update({999}, {{'=', 2, 'Tarantino'}})

-- Replace the tuple, adding a new field.
-- This is also possible with the update() request but
-- the update() request is usually more complicated.
box.space.tester:replace{999, 'Tarantella', 'Tarantula'}

-- Retrieve the tuple.
-- The clause "{999}" is still mandatory, although it does not have to
-- mention the primary key. */
box.space.tester:select{999}

-- Delete the tuple.
-- Once again the clause to identify the primary-key field is mandatory.
box.space.tester:delete{999}
</programlisting>
</para>

<para>
How does Tarantool do a basic operation? Let's take this example:
<programlisting>
box.space.tester:update({3}, {{'=', 2, 'size'}, {'=', 3, 0}})
</programlisting>
which, for those who know SQL, is equivalent to a statement like
UPDATE tester SET "field[2]" = 'size', "field[3]" = 0 WHERE "field[[1]" = 3
</para>

<para>
STEP #1: if this is happening on a remote client, then
the client parses the statement and changes it to a
binary-protocol instruction which has already been checked,
and which the server can understand without needing to parse
everything again. The client ships a packet to the server.
</para>
<para>
STEP #2: the server's <quote>transaction processor</quote> thread uses the
primary-key index on field[1] to find the location of the
tuple in memory. It determines that the tuple can be updated
(not much can go wrong when you're merely changing an unindexed
field value to something shorter).
</para>
<para>
STEP #3: the transaction processor thread sends a message to
the <emphasis>write-ahead logging<alt>There's a Wikipedia article about write-ahead logging: https://en.wikipedia.org/wiki/Write-ahead_logging</alt></emphasis> (WAL) thread.
</para>
<para>
At this point a <quote>yield</quote> takes place. To know
the significance of that -- and it's quite significant -- you
have to know a few facts and a few new words.
</para>
<para>
FACT #1: there is only one transaction processor thread.
Some people are used to the idea that there can be multiple
threads operating on the database, with (say) thread #1
reading row #x while thread#2 writes row#y. With Tarantool
no such thing ever happens. Only the transaction processor
thread can access the database, and there is only one
transaction processor thread for each instance of the server.
</para>
<para>
FACT #2: the transaction processor thread can handle many
<emphasis>fibers<alt>There's a Wikipedia article about fibers: https://en.wikipedia.org/wiki/Fiber_%28computer_science%29</alt></emphasis>.
A fiber is a set of computer instructions that may contain <quote>yield</quote> signals.
The transaction processor thread will execute all computer instructions
until a yield, then switch to execute the instructions of a different fiber.
Thus (say) the thread reads row#x for the sake of fiber#1,
then writes row#y for the sake of fiber#2.
</para>
<para>
FACT #3: yields must happen, otherwise the transaction processor thread
would stick permanently on the same fiber. There are implicit yields:
every data-change operation or network-access causes an implicit yield,
and every statement that goes through the tarantool client causes an
implicit yield. And there are explicit yields: in a Lua function
one can and should add <quote>yield</quote> statements to prevent hogging.
This is called <emphasis>cooperative multitasking<alt>There's a Wikipedia
article with a section about cooperative multitasking:
https://en.wikipedia.org/wiki/Cooperative_multitasking#Cooperative_multitasking.2Ftime-sharing</alt></emphasis>.
</para>
<para>
Since all data-change operations end with an implicit yield and
an implicit commit, and since no data-change operation can change
more than one tuple, there is no need for any locking.
Consider, for example, a Lua function that does three Tarantool operations:<programlisting>
s:sel...{999}                  -- this does not yield and does not commit
s:update({...},{{...}})        -- this yields and commits
s:select{999}                  -- this does not yield and does not commit */</programlisting>
The combination <quote>SELECT plus UPDATE</quote> is an atomic transaction:
the function holds a consistent view of the database
until the UPDATE ends. For the combination <quote>UPDATE plus SELECT</quote>
the view is not consistent, because after the UPDATE the transaction processor
thread can switch to another fiber, and delete the tuple that
was just updated.
</para>
<para>
Since locks don't exist, and disk writes only involve the write-ahead log,
transactions are usually fast. Also the Tarantool server may not be
using up all the threads of a powerful multi-core processor,
so advanced users may be able to start a second Tarantool
server on the same processor without ill effects.
</para>
<para>
  Additional examples of requests can be found in the <citetitle
  xlink:href="https://github.com/tarantool/tarantool/tree/master/test/box"
  xlink:title="Tarantool regression test suite">Tarantool
  regression test suite</citetitle>. A complete grammar of
  supported data-manipulation functions will come later in this chapter.
</para>
<para>
  Since not all Tarantool operations can be expressed with the
  data-manipulation functions, or with Lua, to gain
  complete access to data manipulation functionality one must use
  a <olink targetptr="connectors">Perl, PHP, Python or other
  programming language connector</olink>.  The client/server
  protocol is open and documented: an annotated BNF can be found
  in the source tree, file <filename
  xlink:href="http://tarantool.org/doc/box-protocol.html" xlink:title="A complete BNF of Tarantool client/server protocol">doc/box-protocol.html</filename>.
</para>

</section>
<!--
vim: tw=66 syntax=docbk
vim: spell spelllang=en_us
-->
