<!DOCTYPE book [
<!ENTITY % tnt SYSTEM "../tnt.ent">
%tnt;
]>
<chapter xmlns="http://docbook.org/ns/docbook" version="5.0"
         xmlns:xlink="http://www.w3.org/1999/xlink"
         xml:id="server-administration">
<title>Server administration</title>
<para>
    Typical server administration tasks include starting and stopping
    the server, reloading configuration, taking snapshots, log rotation.
</para>
<section xml:id="signal-handling">
<title>Server signal handling</title>
<para>
  The server is configured to shut down gracefully on SIGTERM and
  SIGINT (keyboard interrupt) or SIGHUP. SIGUSR1 can be used to
  save a snapshot.
  All other signals are blocked or ignored.
  The signals are processed in the main event loop. Thus, if the
  control flow never reaches the event loop (thanks to a runaway stored
  procedure), the server stops responding to any signal, and
  can only be killed with SIGKILL (this signal can not be ignored).
</para>
</section>

<section xml:id="utility-tarantool">

<title>Utility <code>tarantool</code> &mdash; using the server as a client</title>

<para>
If <code>tarantool</code> is started without an initialization file, then
there will be a prompt ("<code>tarantool&gt;</code>") and it will be possible
to enter requests. When used this way, <code>tarantool</code> is a client
program as well as a server program.
</para>
<para>
This section shows all legal syntax for the tarantool program, with short notes and examples.
Other client programs may have similar options and request syntaxes.
Some of the information in this section is duplicated in the Configuration Reference chapter.
</para>

<para>
<bridgehead renderas="sect4">Conventions used in this section</bridgehead>

Tokens are character sequences which are treated as syntactic units within requests.

Square brackets <code>[</code> and <code>]</code> enclose optional syntax.
Three dots in a row <code>...</code> mean the preceding tokens may be repeated.
A vertical bar <code>|</code> means the preceding and following tokens are mutually exclusive alternatives.
</para>

<para>
<bridgehead renderas="sect4">Options when starting client from the command line</bridgehead>

General form: <code>tarantool</code> or <code>tarantool <replaceable>file-name</replaceable></code>
or <code>tarantool <replaceable>option</replaceable>... </code>.
</para>
<para>
File-name can be any script containing code for initializing.
Effect: The code in the file is executed during startup.
Example: <code>init.lua</code>.
Notes: If a script is used, there will be no prompt. The script should contain
configuration information including "box.cfg{...listen=...}" or "box.listen(...)" so
that a separate program can connect to the server via one of the ports.
</para>
<para>
Option is one of the following (in alphabetical order by the long form of the option):
</para>

<variablelist>
  <varlistentry>
    <term xml:id="utility-tarantool-help" xreflabel="utility-tarantool-help">--help</term>
    <listitem><para>
    Syntax: short form: <code>-?</code>
    long form: <code>--h[elp]</code>.
    Effect: Client displays a help message including a list of options.
    Example: <code>--help</code>
    Notes: The program stops after displaying the help.
    </para></listitem>
  </varlistentry>

  <varlistentry>
    <term xml:id="utility-tarantool-version" xreflabel="utility-tarantool-version">--version</term>
    <listitem><para>
    Syntax: short form: <code>-V</code>
    long form: <code>--v[ersion]</code>.
    Effect: Client displays version information.
    Example: <code>--version</code>
    Notes: The program stops after displaying the version.
    </para></listitem>
  </varlistentry>
</variablelist>

<para>
<bridgehead renderas="sect4">Tokens, requests, and special key combinations</bridgehead>
</para>

<para>
Procedure identifiers are: Any sequence of letters, digits, or underscores which is
                           legal according to the rules for Lua identifiers.
                           Procedure identifiers are also called function names.
                           Notes: function names are case insensitive so <code>insert</code> and <code>Insert</code> are not the same thing.
</para>
<para>
String literals are: Any sequence of zero or more characters enclosed in single quotes.
                     Double quotes are legal but single quotes are preferred.
                     Enclosing in double square brackets is good for multi-line strings as described in
                     <link xlink:href="http://www.lua.org/pil/2.4.html">Lua documentation</link>.
                     Examples: 'Hello, world', 'A', [[A\B!]].
</para>
<para>
Numeric literals are: Character sequences containing only digits, optionally preceded by + or -.
                      Examples: 55, -.
                      Notes: Tarantool NUM data type is unsigned, so -1 is understood as a large unsigned number.
</para>
<para>
Single-byte tokens are: * or , or ( or ).
                      Examples: * , ( ).
</para>
<para>
Tokens must be separated from each other by one or more spaces, except that
spaces are not necessary around single-byte tokens or string literals.
</para>

<para xml:id="utility-tarantool-delim">
<bridgehead renderas="sect4">Requests</bridgehead>
Generally requests are entered following the prompt in interactive mode while
tarantool is running. (A prompt will be the word tarantool and a greater-than
sign, for example <code>tarantool&gt;</code>). The end-of-request marker is
by default a newline (line feed).
</para>
<para>
For multi-line requests, it is possible to change the end-of-request marker.
Syntax: <code>console = require('console'); console.delimiter(<replaceable>string-literal</replaceable>)</code>.
The string-literal must be a value in single quotes.
Effect: string becomes end-of-request delimiter, so newline alone is not treated as end of request.
To go back to normal mode: <code>console.delimiter('')<replaceable>string-literal</replaceable></code>.
Example:<programlisting>console = require('console'); console.delimiter('!')
function f ()
  statement_1 = 'a'
  statement_2 = 'b'
  end!
console.delimiter('')!</programlisting>
</para>

<para>
For a condensed Backus-Naur Form [BNF] description of the suggested form of client requests, see
    <link xlink:href="http://tarantool.org/doc/box-protocol.html"><filename>doc/box-protocol.html</filename></link>
    and
    <link xlink:href="https://github.com/tarantool/tarantool/blob/master/doc/sql.txt"><filename>doc/sql.txt</filename></link>.
</para>


<para>
In <emphasis>interactive</emphasis> mode, one types requests and gets results.
Typically the requests
are typed in by the user following prompts.
Here is an example of an interactive-mode tarantool client session:

<programlisting>
<prompt>$ </prompt><userinput>tarantool</userinput>
                [ tarantool will display an introductory message including version number here ]
tarantool> <userinput>box.cfg{listen=3301}</userinput>
                [ tarantool will display configuration information here ]
tarantool> <userinput>s = box.schema.create_space('tester')</userinput>
                [ tarantool may display an in-progress message here ]
---
...
tarantool> <userinput>s:create_index('primary', {type = 'hash', parts = {1, 'NUM'}})</userinput>
---
...
tarantool> <userinput>box.space.tester:insert{1,'My first tuple'}</userinput>
---
- [1, 'My first tuple']
...
tarantool> <userinput>box.space.tester:select(1)</userinput>
---
- - [1, 'My first tuple']
...
tarantool> <userinput>box.space.tester:drop()</userinput>
---
...
tarantool> <userinput>os.exit()</userinput>
2014-04-30 10:28:00.886 [20436] main/101/spawner I> Exiting: master shutdown
<prompt>$ </prompt>
</programlisting>
Explanatory notes about what tarantool displayed in the above example:
</para>
<para>
* Many requests return typed objects.
    In the case of "box.cfg{listen=3301}",
    this result is displayed on the screen.
    If the request had assigned the result to a variable, for example
    "c = box.cfg{listen=3301}", then
    the result would not have been displayed on the screen.
</para>
<para>
* A display of an object always begins with "---" and ends with "...".
</para>
<para>
* The insert request returns an object of type = tuple, so the object display line
    begins with a single dash ('- '). However, the select request returns
    an object of type = <emphasis>table of tuples</emphasis>, so the object display line
    begins with two dashes ('- - ').
</para>

</section>

<section xml:id="dist.lua">
<title>Utility <code>dist.lua</code></title>
<para>
With dist.lua one can say: "start an instance of the
Tarantool server which runs a single user-written Lua
program, allocating disk resources specifically for
that program, via a standardized deployment method."
If Tarantool was downloaded from source, then the script
is in ~/extra/dist/dist.lua. If Tarantool was installed
with debian or Red Hat installation packages, the script
is renamed <code>tarantoolctl</code> and is in
/usr/bin/tarantoolctl. The script handles such things as:
starting, stopping, rotating logs, logging in to the
application's console, and checking status.
</para>

<bridgehead renderas="sect4">configuring for dist.lua</bridgehead>
<para>
The dist.lua script will read a configuration file
named /etc/sysconfig/tarantool, or /etc/default/tarantool.
Most of the settings are similar to the settings
used by <code>box.cfg{...}</code>; however, dist.lua
adjusts some of them by adding an application name.
A copy of /etc/sysconfig/tarantool, with defaults for
all settings, would look like this:<programlisting>
default_cfg = {
     pid_file = "/var/run/tarantool",
     wal_dir = "/var/ lib / tarantool",
     snap_dir = "/var/lib/tarantool",
     sophia_dir = "/var/lib/tarantool",
     logger = "/var/log/tarantool",
     username = "tarantool",
}
instance_dir = "/etc/tarantool/instances.enabled"</programlisting>
</para>
<para>
The settings in the above script are:
</para>
<para>
pid_file = The directory for the pid file and control-socket file.
The script will add "/<replaceable>instance-name</replaceable>" to the directory name.
</para>
<para>
wal_dir = The directory for the write-ahead *.xlog files.
The script will add "/<replaceable>instance-name</replaceable>" to the directory-name.
</para>
<para>
snap_dir = The directory for the snapshot *.snap files.
The script will add "/<replaceable>instance-name</replaceable>" to the directory-name.
</para>
<para>
sophia_dir = The directory for the Sophia-storage-engine files.
The script will add "/sophia/<replaceable>instance-name</replaceable>" to the directory-name.
</para>
<para>
logger = The place where the application log will go.
The script will add /<replaceable>instance-name</replaceable>.log" to the name.
</para>
<para>
username = the user that runs the tarantool server.
</para>
<para>
instance_dir = the directory where all applications for this host are stored.
The user who writes an application for dist.lua must put the application's
source code in this directory, or a symbolic link. For examples in this section the application
name <code>my_app</code> will be used, and its source will have to be in
<code><replaceable>instance_dir</replaceable>/my_app.lua</code>.
</para>

<bridgehead renderas="sect4">commands for dist.lua</bridgehead>
<para>
The command format is <code>dist.lua <replaceable>operation</replaceable> application-name</code>,
where <replaceable>operation</replaceable> is one of: <code>start</code>, <code>stop</code>,
<code>status</code>, <code>logrotate</code>, <code>enter</code>. Thus ...<programlisting>
dist.lua start my_app          -- starts application my_app
dist.lua stop my_app           -- stops my_app
dist.lua enter my_app          -- show my_app's admin console, if it has one
dist.lua logrotate my_app      -- rotate my_app's log files (make new, remove old)
dist.lua status my_app         -- check my_app's status</programlisting>
</para>

<bridgehead renderas="sect4">typical code snippets for dist.lua</bridgehead>
<para>
A user can check whether my_app is running with these lines:<programlisting>
  if dist.lua status my_app; then
        ...
  fi</programlisting>
A user can initiate, for boot time, an init.d set of instructions:<programlisting>
  for (each file mentioned in the instance_dir directory):
   dist.lua start `basename $ file .lua`</programlisting>
A user can set up a further configuration file for log rotation, like this:<programlisting>
/path/to/tarantool/*.log {
     daily
     size 512k
     missingok
     rotate 10
     compress
     delaycompress
     create 0640 tarantool adm
     postrotate
         /path/to/dist.lua logrotate `basename $ 1 .log`
     endscript
}</programlisting>
</para>

<bridgehead renderas="sect4">A detailed example for dist.lua</bridgehead>
<para>
The example's objective is: make a temporary directory
where dist.lua can start a long-running application
and monitor it.
</para>
<para>
The assumptions are: the root password is known,
the computer is only being used for tests,
the Tarantool server is ready to run but is
not currently running, and
there currently is no directory named tarantool_test.
</para>
<para>
Create a directory named /tarantool_test:<programlisting>
sudo mkdir /tarantool_test</programlisting>
</para>
<para>
Copy dist.lua to /tarantool_test.
If you made a source download to ~/tarantool-master, then<programlisting>
sudo cp ~/tarantool-master/extra/dist/dist.lua /tarantool_test/dist.lua</programlisting>
If the file was named tarantoolctl and placed on /usr/bin/tarantoolctl, then<programlisting>
sudo cp /usr/bin/tarantoolctl /tarantool_test/dist.lua</programlisting>
</para>
<para>
Check and possibly change the first line of /tarantool_test/dist.lua.
Initially it says<programlisting>
#!/usr/bin/env tarantool</programlisting>
If that is not correct, edit dist.lua and change the line.
For example, if the Tarantool server is actually on
/home/user/tarantool-master/src/tarantool, change the line to<programlisting>
#!/usr/bin/env /home/user/tarantool-master/src/tarantool</programlisting>
</para>
<para>
Save a copy of /etc/sysconfig/tarantool, if it exists.
</para>
<para>
Edit /etc/sysconfig/tarantool.
It might be necessary to say sudo mkdir /etc/sysconfig first.
Let the new file contents be:<programlisting>
default_cfg = {
     pid_file = "/tarantool_test/my_app.pid",
     wal_dir = "/tarantool_test",
     snap_dir = "/tarantool_test",
     sophia_dir = "/tarantool_test",
     logger = "/tarantool_test/log",
     username = "tarantool",
}
instance_dir = "/tarantool_test"</programlisting>
</para>
<para>
Make the my_app application file, that is, /tarantool_test/my_app.lua.
Let the file contents be:<programlisting>
box.cfg{listen = 3301}
box.schema.user.passwd('Gx5!')
box.schema.user.grant('guest','read,write,execute','universe')
fiber = require('fiber')
box.schema.create_space('tester')
box.space.tester:create_index('primary',{})
i = 0
while 0 == 0 do
 fiber.sleep(5)
 i = i + 1
 print('insert ' .. i)
 box.space.tester:insert{i, 'my_app tuple'}
end</programlisting>
</para>
<para>
Tell dist.lua to start the application ...<programlisting>
cd /tarantool_test
sudo ./dist.lua start my_app</programlisting>
... expect to see messages indicating that the instance has started. Then ...<programlisting>
ls -l /tarantool_test/my_app</programlisting>
... expect to see the .snap file, .xlog file, and sophia directory. Then ...<programlisting>
less /tarantool_test/log/my_app.log</programlisting>
... expect to see the contents of my_app's log, including error messages, if any. Then ...<programlisting>
cd /tarantool_test
#assume that 'tarantool' invokes the tarantool server
sudo tarantool
box.cfg{}
console = require('console')
console.connect('localhost:3301')
box.space.tester:select({0},{iterator='GE'})</programlisting>
... expect to see several tuples that my_app has created.
</para>
<para>
Stop. The only clean way to stop my_app is with dist_lua, thus:<programlisting>
sudo ./dist.lua stop my_app</programlisting>
</para>
<para>
Clean up. Restore the original contents of /etc/sysconfig/tarantool, and ...<programlisting>
cd /
sudo rm -R tarantool_test</programlisting>
</para>

</section>

<section xml:id="os-install-notes">
<title>System-specific administration notes</title>
<blockquote><para>
  This section will contain information about issue or features which exist
  on some platforms but not others -- for example, on certain versions of a
  particular Linux distribution.
</para></blockquote>

  <section xml:id="Debian">
    <title>Administrating with Debian GNU/Linux and Ubuntu</title>
    <para>
        Setting up an instance: ln -s /etc/tarantool/instances.available/instance-name.cfg /etc/tarantool/instances.enabled/
    </para>
    <para>
        Starting all instances: service tarantool start
    </para>
    <para>
        Stopping all instances: service tarantool stop
    </para>
    <para>
        Starting/stopping one instance: service tarantool-instance-name start/stop
    </para>
  </section>
  <section xml:id="rpm-based-distros">
    <title>Fedora, RHEL, CentOS</title>
    <para>
        There are no known permanent issues.
        For transient issues, go to <link xlink:href="https://github.com/tarantool/tarantool/issues">http://github.com/tarantool/tarantool/issues</link> and enter "RHEL" or "CentOS" or "Fedora" or "Red Hat" in the search box.
    </para>
  </section>

  <section xml:id="FreeBSD">
    <title>FreeBSD</title>
    <para>
        There are no known permanent issues.
        For transient issues, go to <link xlink:href="https://github.com/tarantool/tarantool/issues">http://github.com/tarantool/tarantool/issues</link> and enter "FreeBSD" in the search box.
    </para>
  </section>

  <section xml:id="mac-os-x">
    <title>Mac OS X</title>
    <para>
        There are no known permanent issues.
        For transient issues, go to <link xlink:href="https://github.com/tarantool/tarantool/issues">http://github.com/tarantool/tarantool/issues</link> and enter "OS X" in the search box.
    </para>
  </section>

</section>

</chapter>

<!--
vim: tw=66 syntax=docbk
vim: spell spelllang=en_us
-->
