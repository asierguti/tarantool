remote = require 'net.box'
---
...
fiber = require 'fiber'
---
...
log = require 'log'
---
...
msgpack = require 'msgpack'
---
...
box.schema.user.grant('guest', 'read,write,execute', 'universe')
---
...
LISTEN = require('uri').parse(box.cfg.listen)
---
...
space = box.schema.create_space('net_box_test_space')
---
...
index = space:create_index('primary', { type = 'tree' })
---
...
-- low level connection
log.info("create connection")
---
...
cn = remote:new(LISTEN.host, LISTEN.service)
---
...
cn:_wait_state({'active', 'error'}, 1)
---
- true
...
log.info("state is %s", cn.state)
---
...
cn:ping()
---
- true
...
log.info("ping is done")
---
...
cn:ping()
---
- true
...
log.info("ping is done")
---
...
cn:ping()
---
- true
...
cn:call('unexists_procedure')
---
- error: Procedure 'unexists_procedure' is not defined
...
function test_foo(a,b,c) return { {{ [a] = 1 }}, {{ [b] = 2 }}, c } end
---
...
cn:call('test_foo', 'a', 'b', 'c')
---
- - [{'a': 1}]
  - [{'b': 2}]
  - ['c']
...
cn:call(nil, 'a', 'b', 'c')
---
- error: Procedure 'nil' is not defined
...
cn:_select(space.id, space.index.primary.id, 123)
---
- []
...
space:insert{123, 345}
---
- [123, 345]
...
cn:_select(space.id, space.index.primary.id, 123)
---
- - [123, 345]
...
cn:_select(space.id, space.index.primary.id, 123, { limit = 0 })
---
- []
...
cn:_select(space.id, space.index.primary.id, 123, { limit = 1 })
---
- - [123, 345]
...
cn:_select(space.id, space.index.primary.id, 123, { limit = 1, offset = 1 })
---
- []
...
cn.space[space.id]  ~= nil
---
- true
...
cn.space.net_box_test_space ~= nil
---
- true
...
cn.space.net_box_test_space ~= nil
---
- true
...
cn.space.net_box_test_space.index ~= nil
---
- true
...
cn.space.net_box_test_space.index.primary ~= nil
---
- true
...
cn.space.net_box_test_space.index[space.index.primary.id] ~= nil
---
- true
...
cn.space.net_box_test_space.index.primary:select(123)
---
- - [123, 345]
...
cn.space.net_box_test_space.index.primary:select(123, { limit = 0 })
---
- []
...
cn.space.net_box_test_space.index.primary:select(nil, { limit = 1, })
---
- - [123, 345]
...
cn.space.net_box_test_space:insert{234, 1,2,3}
---
- [234, 1, 2, 3]
...
cn.space.net_box_test_space:insert{234, 1,2,3}
---
- error: Duplicate key exists in unique index 0
...
cn.space.net_box_test_space.insert{234, 1,2,3}
---
- error: 'builtin/net.box.lua:229: Use space:method(...) instead space.method(...)'
...
cn.space.net_box_test_space:replace{354, 1,2,3}
---
- [354, 1, 2, 3]
...
cn.space.net_box_test_space:replace{354, 1,2,4}
---
- [354, 1, 2, 4]
...
cn.space.net_box_test_space:select{123}
---
- - [123, 345]
...
space:select({123}, { iterator = 'GE' })
---
- - [123, 345]
  - [234, 1, 2, 3]
  - [354, 1, 2, 4]
...
cn.space.net_box_test_space:select({123}, { iterator = 'GE' })
---
- - [123, 345]
  - [234, 1, 2, 3]
  - [354, 1, 2, 4]
...
cn.space.net_box_test_space:select({123}, { iterator = 'GT' })
---
- - [234, 1, 2, 3]
  - [354, 1, 2, 4]
...
cn.space.net_box_test_space:select({123}, { iterator = 'GT', limit = 1 })
---
- - [234, 1, 2, 3]
...
cn.space.net_box_test_space:select({123}, { iterator = 'GT', limit = 1, offset = 1 })
---
- - [354, 1, 2, 4]
...
cn.space.net_box_test_space:select{123}
---
- - [123, 345]
...
cn.space.net_box_test_space:update({123}, { { '+', 2, 1 } })
---
- [123, 346]
...
cn.space.net_box_test_space:update(123, { { '+', 2, 1 } })
---
- [123, 347]
...
cn.space.net_box_test_space:select{123}
---
- - [123, 347]
...
cn.space.net_box_test_space:update({123}, { { '=', 1, 2 } })
---
- [2, 347]
...
cn.space.net_box_test_space:select{2}
---
- - [2, 347]
...
cn.space.net_box_test_space:select({234}, { iterator = 'LT' })
---
- - [2, 347]
...
cn.space.net_box_test_space:update({1}, { { '+', 2, 2 } })
---
...
cn.space.net_box_test_space:delete{1}
---
...
cn.space.net_box_test_space:delete{2}
---
- [2, 347]
...
cn.space.net_box_test_space:delete{2}
---
...
-- test one-based indexing in splice operation (see update.test.lua)
cn.space.net_box_test_space:replace({10, 'abcde'})
---
- [10, 'abcde']
...
cn.space.net_box_test_space:update(10,  {{':', 2, 0, 0, '!'}})
---
- error: 'SPLICE error on field 2: offset is out of bound'
...
cn.space.net_box_test_space:update(10,  {{':', 2, 1, 0, '('}})
---
- [10, '(abcde']
...
cn.space.net_box_test_space:update(10,  {{':', 2, 2, 0, '({'}})
---
- [10, '(({abcde']
...
cn.space.net_box_test_space:update(10,  {{':', 2, -1, 0, ')'}})
---
- [10, '(({abcde)']
...
cn.space.net_box_test_space:update(10,  {{':', 2, -2, 0, '})'}})
---
- [10, '(({abcde}))']
...
cn.space.net_box_test_space:delete{10}
---
- [10, '(({abcde}))']
...
cn.space.net_box_test_space:select({}, { iterator = 'ALL' })
---
- - [234, 1, 2, 3]
  - [354, 1, 2, 4]
...
cn.space.net_box_test_space.index.primary:min()
---
- [234, 1, 2, 3]
...
cn.space.net_box_test_space.index.primary:min(354)
---
- [354, 1, 2, 4]
...
cn.space.net_box_test_space.index.primary:max()
---
- [354, 1, 2, 4]
...
cn.space.net_box_test_space.index.primary:max(234)
---
- [234, 1, 2, 3]
...
cn.space.net_box_test_space.index.primary:count()
---
- 2
...
cn.space.net_box_test_space.index.primary:count(354)
---
- 1
...
cn.space.net_box_test_space:get(354)
---
- [354, 1, 2, 4]
...
-- reconnects after errors
-- -- 1. no reconnect
cn:_fatal('Test fatal error')
---
...
cn.state
---
- closed
...
cn:ping()
---
- false
...
cn:call('test_foo')
---
- error: Connection is not established
...
-- -- 2 reconnect
cn = remote:new(LISTEN.host, LISTEN.service, { reconnect_after = .1 })
---
...
cn:_wait_state({'active'}, 1)
---
- true
...
cn.space ~= nil
---
- true
...
cn.space.net_box_test_space:select({}, { iterator = 'ALL' })
---
- - [234, 1, 2, 3]
  - [354, 1, 2, 4]
...
cn:_fatal 'Test error'
---
...
cn:_wait_state({'active', 'activew'}, 2)
---
- true
...
cn:ping()
---
- true
...
cn.state
---
- active
...
cn.space.net_box_test_space:select({}, { iterator = 'ALL' })
---
- - [234, 1, 2, 3]
  - [354, 1, 2, 4]
...
cn:_fatal 'Test error'
---
...
cn:_select(space.id, 0, {}, { iterator = 'ALL' })
---
- - [234, 1, 2, 3]
  - [354, 1, 2, 4]
...
-- send broken packet (remote server will close socket)
cn.s:syswrite(msgpack.encode(1) .. msgpack.encode('abc'))
---
- 5
...
fiber.sleep(.2)
---
...
cn.state
---
- active
...
cn:ping()
---
- true
...
-- -- dot-new-method
cn1 = remote.new(LISTEN.host, LISTEN.service)
---
...
cn1:_select(space.id, 0, {}, { iterator = 'ALL' })
---
- - [234, 1, 2, 3]
  - [354, 1, 2, 4]
...
-- -- error while waiting for response
type(fiber.create(function() fiber.sleep(.5) cn:_fatal('Test error') end))
---
- userdata
...
function pause() fiber.sleep(10) return true end
---
...
cn:call('pause')
---
- error: Test error
...
cn:call('test_foo', 'a', 'b', 'c')
---
- - [{'a': 1}]
  - [{'b': 2}]
  - ['c']
...
-- call
remote.self:call('test_foo', 'a', 'b', 'c')
---
- - [{'a': 1}]
  - [{'b': 2}]
  - ['c']
...
cn:call('test_foo', 'a', 'b', 'c')
---
- - [{'a': 1}]
  - [{'b': 2}]
  - ['c']
...
-- long replies
function long_rep() return { 1,  string.rep('a', 5000) } end
---
...
res = cn:call('long_rep')
---
...
res[1][1] == 1
---
- true
...
res[1][2] == string.rep('a', 5000)
---
- true
...
function long_rep() return { 1,  string.rep('a', 50000) } end
---
...
res = cn:call('long_rep')
---
...
res[1][1] == 1
---
- true
...
res[1][2] == string.rep('a', 50000)
---
- true
...
-- auth
cn.proto.b64decode('gJLocxbO32VmfO8x04xRVxKfgwzmNVM2t6a1ME8XsD0=')
---
- !!binary gJLocxbO32VmfO8x04xRVxKfgwzmNVM2t6a1ME8XsD0=
...
cn.proto.b64decode('gJLoc!!!!!!!')
---
- !!binary gJLo
...
cn = remote:new(LISTEN.host, LISTEN.service, { user = 'netbox', password = '123', wait_connected = true })
---
...
cn:is_connected()
---
- false
...
cn.error
---
- User 'netbox' is not found
...
cn.state
---
- closed
...
box.schema.user.create('netbox', { password  = 'test' })
---
...
box.schema.user.grant('netbox', 'read, write, execute', 'universe');
---
...
cn = remote:new(LISTEN.host, LISTEN.service, { user = 'netbox', password = 'test' })
---
...
cn.state
---
- active
...
cn.error
---
- null
...
cn:ping()
---
- true
...
function ret_after(to) fiber.sleep(to) return {{to}} end
---
...
-- timeouts
cn:timeout(1).space.net_box_test_space.index.primary:select{234}
---
- - [234, 1, 2, 3]
...
cn:call('ret_after', .01)
---
- - [0.01]
...
cn:timeout(1):call('ret_after', .01)
---
- - [0.01]
...
cn:timeout(.01):call('ret_after', 1)
---
- error: Timeout exceeded
...
cn = remote:timeout(0.0000000001):new(LISTEN.host, LISTEN.service, { user = 'netbox', password = '123' })
---
- error: Timeout exceeded
...
cn = remote:timeout(1):new(LISTEN.host, LISTEN.service, { user = 'netbox', password = '123' })
---
...
remote.self:ping()
---
- true
...
remote.self.space.net_box_test_space:select{234}
---
- - [234, 1, 2, 3]
...
remote.self:timeout(123).space.net_box_test_space:select{234}
---
- - [234, 1, 2, 3]
...
-- cleanup database after tests
space:drop()
---
...
-- admin console tests
function console_test(...) return { ... } end
---
...
function console_test_error(...) error(string.format(...)) end
---
...
function console_unpack_test(...) return ... end
---
...
ADMIN = require('uri').parse(os.getenv('ADMIN'))
---
...
cn = remote:new(LISTEN.host, LISTEN.service)
---
...
cnc = remote:new(ADMIN.host, ADMIN.service)
---
...
cnc.console
---
- true
...
cn:call('console_test', 1, 2, 3, 'string', nil)
---
- - [1, 2, 3, 'string']
...
cnc:call('console_test', 1, 2, 3, 'string', nil)
---
- - [1, 2, 3, 'string']
...
cn:call('console_test_error', 'error %d', 123)
---
- error: '[string "function console_test_error(...) error(string..."]:1: error 123'
...
cnc:call('console_test_error', 'error %d', 123)
---
- error: '[string "function console_test_error(...) error(string..."]:1: error 123'
...
cn:call('console_unpack_test', 1)
---
- - [1]
...
cnc:call('console_unpack_test', 1)
---
- - [1]
...
cn:call('123')
---
- error: Procedure '123' is not defined
...
cnc:call('123')
---
- error: '[string "123()"]:1: unexpected symbol near ''123'''
...
-- #545 user or password is not defined
remote:new(LISTEN.host, LISTEN.service, { user = 'test' })
---
- error: 'net.box: password is not defined'
...
remote:new(LISTEN.host, LISTEN.service, { password = 'test' })
---
- error: 'net.box: user is not defined'
...
-- #544 usage for remote[point]method
cn:call('console_test')
---
- - []
...
cn.call('console_test')
---
- error: 'usage: remote:call(proc_name, ...)'
...
cn.ping()
---
- error: 'usage: remote:ping()'
...
remote.self:call('console_test')
---
- []
...
remote.self.call('console_test')
---
- error: 'usage: remote:call(proc_name, ...)'
...
-- uri as the first argument
uri = string.format('%s:%s@%s:%s', 'netbox', 'test', LISTEN.host, LISTEN.service)
---
...
cn = remote.new(uri)
---
...
cn:ping()
---
- true
...
cn:close()
---
...
uri = string.format('%s@%s:%s', 'netbox', LISTEN.host, LISTEN.service)
---
...
remote.new(uri)
---
- error: 'net.box: password is not defined'
...
cn = remote.new(uri, { password = 'test' })
---
...
cn:ping()
---
- true
...
cn:close()
---
...
